{
  "version": 3,
  "sources": ["../node_modules/.pnpm/remark-mdx-frontmatter@1.1.1/node_modules/remark-mdx-frontmatter/dist/index.js", "../node_modules/.pnpm/mdx-bundler@9.2.1_esbuild@0.17.11/node_modules/mdx-bundler/dist/dirname-messed-up.cjs", "../node_modules/.pnpm/fault@2.0.1/node_modules/fault/index.js", "../node_modules/.pnpm/micromark-extension-frontmatter@1.0.1/node_modules/micromark-extension-frontmatter/matters.js", "../node_modules/.pnpm/micromark-util-character@1.1.0/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js", "../node_modules/.pnpm/micromark-util-character@1.1.0/node_modules/micromark-util-character/index.js", "../node_modules/.pnpm/micromark-extension-frontmatter@1.0.1/node_modules/micromark-extension-frontmatter/lib/syntax.js", "../node_modules/.pnpm/micromark-extension-frontmatter@1.0.1/node_modules/micromark-extension-frontmatter/index.js", "../node_modules/.pnpm/mdast-util-frontmatter@1.0.1/node_modules/mdast-util-frontmatter/lib/index.js", "../node_modules/.pnpm/mdast-util-frontmatter@1.0.1/node_modules/mdast-util-frontmatter/index.js", "../node_modules/.pnpm/remark-frontmatter@4.0.1/node_modules/remark-frontmatter/index.js", "../node_modules/.pnpm/mdx-bundler@9.2.1_esbuild@0.17.11/node_modules/mdx-bundler/dist/index.js", "../server.js", "server-entry-module:@remix-run/dev/server-build", "../node_modules/.pnpm/@remix-run+dev@1.14.1/node_modules/@remix-run/dev/dist/config/defaults/entry.server.node.tsx", "../app/root.tsx", "../app/routes/_index.tsx", "../app/routes/posts.$slug.tsx", "../app/utils/post.ts", "../app/utils/mdx.server.ts", "../app/routes/posts._index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remarkMdxFrontmatter = void 0;\nconst estree_util_is_identifier_name_1 = require(\"estree-util-is-identifier-name\");\nconst estree_util_value_to_estree_1 = require(\"estree-util-value-to-estree\");\nconst js_yaml_1 = require(\"js-yaml\");\nconst toml_1 = require(\"toml\");\n/**\n * A remark plugin to expose frontmatter data as named exports.\n *\n * @param options - Optional options to configure the output.\n * @returns A unified transformer.\n */\nconst remarkMdxFrontmatter = ({ name } = {}) => (ast) => {\n    const mdast = ast;\n    const imports = [];\n    if (name && !(0, estree_util_is_identifier_name_1.name)(name)) {\n        throw new Error(`If name is specified, this should be a valid identifier name, got: ${JSON.stringify(name)}`);\n    }\n    for (const node of mdast.children) {\n        let data;\n        const { value } = node;\n        if (node.type === 'yaml') {\n            data = (0, js_yaml_1.load)(value);\n            // @ts-expect-error A custom node type may be registered for TOML frontmatter data.\n        }\n        else if (node.type === 'toml') {\n            data = (0, toml_1.parse)(value);\n        }\n        if (data == null) {\n            continue;\n        }\n        if (!name && typeof data !== 'object') {\n            throw new Error(`Expected frontmatter data to be an object, got:\\n${value}`);\n        }\n        imports.push({\n            type: 'mdxjsEsm',\n            value: '',\n            data: {\n                estree: {\n                    type: 'Program',\n                    sourceType: 'module',\n                    body: [\n                        {\n                            type: 'ExportNamedDeclaration',\n                            source: null,\n                            specifiers: [],\n                            declaration: {\n                                type: 'VariableDeclaration',\n                                kind: 'const',\n                                declarations: Object.entries(name ? { [name]: data } : data).map(([identifier, val]) => {\n                                    if (!(0, estree_util_is_identifier_name_1.name)(identifier)) {\n                                        throw new Error(`Frontmatter keys should be valid identifiers, got: ${JSON.stringify(identifier)}`);\n                                    }\n                                    return {\n                                        type: 'VariableDeclarator',\n                                        id: { type: 'Identifier', name: identifier },\n                                        init: (0, estree_util_value_to_estree_1.valueToEstree)(val),\n                                    };\n                                }),\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n    }\n    mdast.children.unshift(...imports);\n};\nexports.remarkMdxFrontmatter = remarkMdxFrontmatter;\n", "\"use strict\";\n\n// __dirname isn't supported in ESM files\n// we could use import.meta, but that may not be supported by whatever bundler\n// folks may be using, so we'll just go with this...\nmodule.exports = !__dirname.includes('mdx-bundler');", "// @ts-expect-error\nimport formatter from 'format'\n\nexport const fault = Object.assign(create(Error), {\n  eval: create(EvalError),\n  range: create(RangeError),\n  reference: create(ReferenceError),\n  syntax: create(SyntaxError),\n  type: create(TypeError),\n  uri: create(URIError)\n})\n\n/**\n * Create a new `EConstructor`, with the formatted `format` as a first argument.\n *\n * @template {Error} Fault\n * @template {new (reason: string) => Fault} Class\n * @param {Class} Constructor\n */\nexport function create(Constructor) {\n  /** @type {string} */\n  // @ts-expect-error\n  FormattedError.displayName = Constructor.displayName || Constructor.name\n\n  return FormattedError\n\n  /**\n   * Create an error with a printf-like formatted message.\n   *\n   * @param {string|null} [format]\n   *   Template string.\n   * @param {...unknown} values\n   *   Values to render in `format`.\n   * @returns {Fault}\n   */\n  function FormattedError(format, ...values) {\n    /** @type {string} */\n    const reason = format ? formatter(format, ...values) : format\n    return new Constructor(reason)\n  }\n}\n", "/**\n * @typedef {'yaml'|'toml'} Preset\n *   Either `'yaml'` or `'toml'`.\n *\n * @typedef Info\n * @property {string} open\n * @property {string} close\n *\n * @typedef MatterProps\n * @property {string} type\n *   Type to tokenize as.\n * @property {boolean} [anywhere=false]\n *   If `true`, matter can be found anywhere in the document.\n *   If `false` (default), only matter at the start of the document is\n *   recognized.\n *\n * @typedef MarkerProps\n *   Marker configuration.\n * @property {string|Info} marker\n *   Character used to construct fences.\n *   By providing an object with `open` and `close` different characters can be\n *   used for opening and closing fences.\n *   For example the character `'-'` will result in `'---'` being used as the\n *   fence\n * @property {never} [fence]\n *   If `marker` is set, `fence` must not be set.\n *\n * @typedef FenceProps\n *   Fence configuration.\n * @property {string|Info} fence\n *   String used as the complete fence.\n *   By providing an object with `open` and `close` different values can be used\n *   for opening and closing fences.\n *   This can be used too if fences contain different characters or lengths\n *   other than 3.\n * @property {never} [marker]\n *   If `fence` is set, `marker` must not be set.\n *\n * @typedef {(MatterProps & FenceProps)|(MatterProps & MarkerProps)} Matter\n *   Matter object describing frontmatter.\n *\n * @typedef {Preset|Matter|Array<Preset|Matter>} Options\n *   Matter object or preset, or many.\n */\n\nimport {fault} from 'fault'\nconst own = {}.hasOwnProperty\nconst markers = {\n  yaml: '-',\n  toml: '+'\n}\n\n/**\n * @param {Options} [options='yaml']\n * @returns {Array<Matter>}\n */\nexport function matters(options = 'yaml') {\n  /** @type {Array<Matter>} */\n  const results = []\n  let index = -1\n\n  // One preset or matter.\n  if (!Array.isArray(options)) {\n    options = [options]\n  }\n  while (++index < options.length) {\n    results[index] = matter(options[index])\n  }\n  return results\n}\n\n/**\n * @param {Preset|Matter} option\n * @returns {Matter}\n */\nfunction matter(option) {\n  let result = option\n  if (typeof result === 'string') {\n    if (!own.call(markers, result)) {\n      throw fault('Missing matter definition for `%s`', result)\n    }\n    result = {\n      type: result,\n      marker: markers[result]\n    }\n  } else if (typeof result !== 'object') {\n    throw fault('Expected matter to be an object, not `%j`', result)\n  }\n  if (!own.call(result, 'type')) {\n    throw fault('Missing `type` in matter `%j`', result)\n  }\n  if (!own.call(result, 'fence') && !own.call(result, 'marker')) {\n    throw fault('Missing `marker` or `fence` in matter `%j`', result)\n  }\n  return result\n}\n", "// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n", "/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n", "/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('../matters.js').Options} Options\n * @typedef {import('../matters.js').Matter} Matter\n * @typedef {import('../matters.js').Info} Info\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {matters} from '../matters.js'\n\n/**\n * Add support for parsing frontmatter in markdown.\n *\n * Function that can be called to get a syntax extension for micromark (passed\n * in `extensions`).\n *\n * Supports YAML by default.\n * Can be configured to support TOML and more.\n *\n * @param {Options} [options='yaml']\n *   Configuration (optional).\n * @returns {Extension}\n *   Syntax extension for micromark (passed in `extensions`).\n */\nexport function frontmatter(options) {\n  const settings = matters(options)\n  /** @type {ConstructRecord} */\n  const flow = {}\n  let index = -1\n  while (++index < settings.length) {\n    const matter = settings[index]\n    const code = fence(matter, 'open').charCodeAt(0)\n    if (code in flow) {\n      // @ts-expect-error it clearly does exist.\n      flow[code].push(parse(matter))\n    } else {\n      flow[code] = [parse(matter)]\n    }\n  }\n  return {\n    flow\n  }\n}\n\n/**\n * @param {Matter} matter\n * @returns {Construct}\n */\nfunction parse(matter) {\n  const name = matter.type\n  const anywhere = matter.anywhere\n  const valueType = name + 'Value'\n  const fenceType = name + 'Fence'\n  const sequenceType = fenceType + 'Sequence'\n  const fenceConstruct = {\n    tokenize: tokenizeFence,\n    partial: true\n  }\n  /** @type {string} */\n  let buffer\n  return {\n    tokenize: tokenizeFrontmatter,\n    concrete: true\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFrontmatter(effects, ok, nok) {\n    const self = this\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      const position = self.now()\n      if (position.column !== 1 || (!anywhere && position.line !== 1)) {\n        return nok(code)\n      }\n      effects.enter(name)\n      buffer = fence(matter, 'open')\n      return effects.attempt(fenceConstruct, afterOpeningFence, nok)(code)\n    }\n\n    /** @type {State} */\n    function afterOpeningFence(code) {\n      buffer = fence(matter, 'close')\n      return lineEnd(code)\n    }\n\n    /** @type {State} */\n    function lineStart(code) {\n      if (code === null || markdownLineEnding(code)) {\n        return lineEnd(code)\n      }\n      effects.enter(valueType)\n      return lineData(code)\n    }\n\n    /** @type {State} */\n    function lineData(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(valueType)\n        return lineEnd(code)\n      }\n      effects.consume(code)\n      return lineData\n    }\n\n    /** @type {State} */\n    function lineEnd(code) {\n      // Require a closing fence.\n      if (code === null) {\n        return nok(code)\n      }\n\n      // Can only be an eol.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(fenceConstruct, after, lineStart)\n    }\n\n    /** @type {State} */\n    function after(code) {\n      effects.exit(name)\n      return ok(code)\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeFence(effects, ok, nok) {\n    let bufferIndex = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (code === buffer.charCodeAt(bufferIndex)) {\n        effects.enter(fenceType)\n        effects.enter(sequenceType)\n        return insideSequence(code)\n      }\n      return nok(code)\n    }\n\n    /** @type {State} */\n    function insideSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n        if (markdownSpace(code)) {\n          effects.enter('whitespace')\n          return insideWhitespace(code)\n        }\n        return fenceEnd(code)\n      }\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return insideSequence\n      }\n      return nok(code)\n    }\n\n    /** @type {State} */\n    function insideWhitespace(code) {\n      if (markdownSpace(code)) {\n        effects.consume(code)\n        return insideWhitespace\n      }\n      effects.exit('whitespace')\n      return fenceEnd(code)\n    }\n\n    /** @type {State} */\n    function fenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(fenceType)\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @param {Matter} matter\n * @param {'open'|'close'} prop\n * @returns {string}\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They\u2019re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * @param {Info|string} schema\n * @param {'open'|'close'} prop\n * @returns {string}\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n", "/**\n * @typedef {import('./matters.js').Options} Options\n */\n\nexport {frontmatterHtml} from './lib/html.js'\nexport {frontmatter} from './lib/syntax.js'\n", "/**\n * @typedef {import('mdast').Literal} Literal\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n * @typedef {import('micromark-extension-frontmatter/matters.js').Matter} Matter\n * @typedef {import('micromark-extension-frontmatter/matters.js').Info} Info\n */\n\nimport {matters} from 'micromark-extension-frontmatter/matters.js'\n\n/**\n * Create an extension for `mdast-util-from-markdown`.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function frontmatterFromMarkdown(options) {\n  // @ts-expect-error: `micromark-extension-frontmatter` should fix types to\n  // accept `null` as options.\n  const settings = matters(options)\n  /** @type {FromMarkdownExtension['enter']} */\n  const enter = {}\n  /** @type {FromMarkdownExtension['exit']} */\n  const exit = {}\n  let index = -1\n\n  while (++index < settings.length) {\n    const matter = settings[index]\n    enter[matter.type] = opener(matter)\n    exit[matter.type] = close\n    exit[matter.type + 'Value'] = value\n  }\n\n  return {enter, exit}\n}\n\n/**\n * @param {Matter} matter\n * @returns {FromMarkdownHandle} enter\n */\nfunction opener(matter) {\n  return open\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function open(token) {\n    // @ts-expect-error: custom.\n    this.enter({type: matter.type, value: ''}, token)\n    this.buffer()\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction close(token) {\n  const data = this.resume()\n  const node = /** @type {Literal} */ (this.exit(token))\n  // Remove the initial and final eol.\n  node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction value(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown`.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function frontmatterToMarkdown(options) {\n  // To do: use an extension object with `satisfies` later.\n  /** @type {ToMarkdownExtension['unsafe']} */\n  const unsafe = []\n  /** @type {ToMarkdownExtension['handlers']} */\n  const handlers = {}\n  // @ts-expect-error: `micromark-extension-frontmatter` should fix types to\n  // accept `null` as options.\n  const settings = matters(options)\n  let index = -1\n\n  while (++index < settings.length) {\n    const matter = settings[index]\n\n    // @ts-expect-error: this can add custom frontmatter nodes.\n    // Typing those is the responsibility of the end user.\n    handlers[matter.type] = handler(matter)\n\n    // To do: idea: perhaps make this smarter, with an `after` of the second char?\n    unsafe.push({atBreak: true, character: fence(matter, 'open').charAt(0)})\n  }\n\n  return {unsafe, handlers}\n}\n\n/**\n * Create a handle that can serialize a frontmatter node as markdown.\n *\n * @param {Matter} matter\n *   Structure.\n * @returns {(node: Literal) => string} enter\n *   Handler.\n */\nfunction handler(matter) {\n  const open = fence(matter, 'open')\n  const close = fence(matter, 'close')\n\n  return handle\n\n  /**\n   * Serialize a frontmatter node as markdown.\n   *\n   * @param {Literal} node\n   *   Node to serialize.\n   * @returns {string}\n   *   Serialized node.\n   */\n  function handle(node) {\n    return open + (node.value ? '\\n' + node.value : '') + '\\n' + close\n  }\n}\n\n/**\n * Get an `open` or `close` fence.\n *\n * @param {Matter} matter\n *   Structure.\n * @param {'open' | 'close'} prop\n *   Field to get.\n * @returns {string}\n *   Fence.\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They\u2019re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * Take `open` or `close` fields when schema is an info object, or use the\n * given value when it is a string.\n *\n * @param {Info | string} schema\n *   Info object or value.\n * @param {'open' | 'close'} prop\n *   Field to get.\n * @returns {string}\n *   Thing to use for the opening or closing.\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n", "/**\n * @typedef {import('./lib/index.js').Options} Options\n * @typedef {import('./lib/index.js').Matter} Matter\n * @typedef {import('./lib/index.js').Info} Info\n */\n\nexport {frontmatterFromMarkdown, frontmatterToMarkdown} from './lib/index.js'\n", "/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n */\n\nimport {frontmatter} from 'micromark-extension-frontmatter'\nimport {\n  frontmatterFromMarkdown,\n  frontmatterToMarkdown\n} from 'mdast-util-frontmatter'\n\n/**\n * Plugin to add support for frontmatter.\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkFrontmatter(options = 'yaml') {\n  const data = this.data()\n\n  add('micromarkExtensions', frontmatter(options))\n  add('fromMarkdownExtensions', frontmatterFromMarkdown(options))\n  add('toMarkdownExtensions', frontmatterToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bundleMDX = bundleMDX;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _string_decoder = require(\"string_decoder\");\nvar _remarkMdxFrontmatter = require(\"remark-mdx-frontmatter\");\nvar _grayMatter = _interopRequireDefault(require(\"gray-matter\"));\nvar esbuild = _interopRequireWildcard(require(\"esbuild\"));\nvar _nodeResolve = require(\"@esbuild-plugins/node-resolve\");\nvar _esbuildPluginGlobalExternals = require(\"@fal-works/esbuild-plugin-global-externals\");\nvar _uuid = require(\"uuid\");\nvar _dirnameMessedUp = _interopRequireDefault(require(\"./dirname-messed-up.cjs\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nconst {\n  readFile,\n  unlink\n} = _fs.default.promises;\n\n/**\n * @template {{[key: string]: any}} Frontmatter\n * @param {import('./types').BundleMDX<Frontmatter>} options\n * @returns\n */\nasync function bundleMDX({\n  file,\n  source,\n  files = {},\n  mdxOptions = options => options,\n  esbuildOptions = options => options,\n  globals = {},\n  cwd = _path.default.join(process.cwd(), `__mdx_bundler_fake_dir__`),\n  grayMatterOptions = options => options,\n  bundleDirectory,\n  bundlePath\n}) {\n  /* c8 ignore start */\n  if (_dirnameMessedUp.default && !process.env.ESBUILD_BINARY_PATH) {\n    console.warn(`mdx-bundler warning: esbuild maybe unable to find its binary, if your build fails you'll need to set ESBUILD_BINARY_PATH. Learn more: https://github.com/kentcdodds/mdx-bundler/blob/main/README.md#nextjs-esbuild-enoent`);\n  }\n  /* c8 ignore stop */\n\n  // @mdx-js/esbuild is a native ESM, and we're running in a CJS context. This is the\n  // only way to import ESM within CJS\n  const [{\n    default: mdxESBuild\n  }, {\n    default: remarkFrontmatter\n  }] = await Promise.all([import('@mdx-js/esbuild'), import('remark-frontmatter')]);\n  let /** @type string */code, /** @type string */entryPath, /** @type Omit<grayMatter.GrayMatterFile<string>, \"data\"> & {data: Frontmatter} */matter;\n\n  /** @type Record<string, string> */\n  const absoluteFiles = {};\n  const isWriting = typeof bundleDirectory === 'string';\n  if (typeof bundleDirectory !== typeof bundlePath) {\n    throw new Error('When using `bundleDirectory` or `bundlePath` the other must be set.');\n  }\n\n  /** @type {(vfile: unknown) => vfile is import('vfile').VFile} */\n  function isVFile(vfile) {\n    return typeof vfile === 'object' && vfile !== null && 'value' in vfile;\n  }\n  if (typeof source === 'string') {\n    // The user has supplied MDX source.\n    /** @type any */ // Slight type hack to get the graymatter front matter typed correctly.\n    const gMatter = (0, _grayMatter.default)(source, grayMatterOptions({}));\n    matter = gMatter;\n    entryPath = _path.default.join(cwd, `./_mdx_bundler_entry_point-${(0, _uuid.v4)()}.mdx`);\n    absoluteFiles[entryPath] = source;\n  } else if (isVFile(source)) {\n    const value = String(source.value);\n    /** @type any */ // Slight type hack to get the graymatter front matter typed correctly.\n    const gMatter = (0, _grayMatter.default)(value, grayMatterOptions({}));\n    matter = gMatter;\n    entryPath = source.path ? _path.default.isAbsolute(source.path) ? source.path : _path.default.join(source.cwd, source.path) : _path.default.join(cwd, `./_mdx_bundler_entry_point-${(0, _uuid.v4)()}.mdx`);\n    absoluteFiles[entryPath] = value;\n  } else if (typeof file === 'string') {\n    // The user has supplied a file.\n    /** @type any */ // Slight type hack to get the graymatter front matter typed correctly.\n    const gMatter = _grayMatter.default.read(file, grayMatterOptions({}));\n    matter = gMatter;\n    entryPath = file;\n    /* c8 ignore start */\n  } else {\n    // The user supplied neither file or source.\n    // The typings should prevent reaching this point.\n    // It is ignored from coverage as the tests wouldn't run in a way that can get here.\n    throw new Error('`source` or `file` must be defined');\n  }\n  /* c8 ignore end*/\n\n  for (const [filepath, fileCode] of Object.entries(files)) {\n    absoluteFiles[_path.default.join(cwd, filepath)] = fileCode;\n  }\n\n  /** @type import('esbuild').Plugin */\n  const inMemoryPlugin = {\n    name: 'inMemory',\n    setup(build) {\n      build.onResolve({\n        filter: /.*/\n      }, ({\n        path: filePath,\n        importer\n      }) => {\n        if (filePath === entryPath) {\n          return {\n            path: filePath,\n            pluginData: {\n              inMemory: true,\n              contents: absoluteFiles[filePath]\n            }\n          };\n        }\n        const modulePath = _path.default.resolve(_path.default.dirname(importer), filePath);\n        if (modulePath in absoluteFiles) {\n          return {\n            path: modulePath,\n            pluginData: {\n              inMemory: true,\n              contents: absoluteFiles[modulePath]\n            }\n          };\n        }\n        for (const ext of ['.js', '.ts', '.jsx', '.tsx', '.json', '.mdx']) {\n          const fullModulePath = `${modulePath}${ext}`;\n          if (fullModulePath in absoluteFiles) {\n            return {\n              path: fullModulePath,\n              pluginData: {\n                inMemory: true,\n                contents: absoluteFiles[fullModulePath]\n              }\n            };\n          }\n        }\n\n        // Return an empty object so that esbuild will handle resolving the file itself.\n        return {};\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async ({\n        path: filePath,\n        pluginData\n      }) => {\n        if (pluginData === undefined || !pluginData.inMemory) {\n          // Return an empty object so that esbuild will load & parse the file contents itself.\n          return null;\n        }\n\n        // the || .js allows people to exclude a file extension\n        const fileType = (_path.default.extname(filePath) || '.jsx').slice(1);\n        const contents = absoluteFiles[filePath];\n        if (fileType === 'mdx') return null;\n\n        /** @type import('esbuild').Loader */\n        let loader;\n        if (build.initialOptions.loader && build.initialOptions.loader[`.${fileType}`]) {\n          loader = build.initialOptions.loader[`.${fileType}`];\n        } else {\n          loader = /** @type import('esbuild').Loader */fileType;\n        }\n        return {\n          contents,\n          loader\n        };\n      });\n    }\n  };\n  const buildOptions = esbuildOptions({\n    entryPoints: [entryPath],\n    write: isWriting,\n    outdir: isWriting ? bundleDirectory : undefined,\n    publicPath: isWriting ? bundlePath : undefined,\n    absWorkingDir: cwd,\n    define: {\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n    },\n    plugins: [(0, _esbuildPluginGlobalExternals.globalExternals)({\n      ...globals,\n      react: {\n        varName: 'React',\n        type: 'cjs'\n      },\n      'react-dom': {\n        varName: 'ReactDOM',\n        type: 'cjs'\n      },\n      'react/jsx-runtime': {\n        varName: '_jsx_runtime',\n        type: 'cjs'\n      }\n    }),\n    // eslint-disable-next-line @babel/new-cap\n    (0, _nodeResolve.NodeResolvePlugin)({\n      extensions: ['.js', '.ts', '.jsx', '.tsx'],\n      resolveOptions: {\n        basedir: cwd\n      }\n    }), inMemoryPlugin, mdxESBuild(mdxOptions({\n      remarkPlugins: [remarkFrontmatter, [_remarkMdxFrontmatter.remarkMdxFrontmatter, {\n        name: 'frontmatter'\n      }]]\n    }, matter.data))],\n    bundle: true,\n    format: 'iife',\n    globalName: 'Component',\n    minify: true\n  }, matter.data);\n  const bundled = await esbuild.build(buildOptions);\n  if (bundled.outputFiles) {\n    const decoder = new _string_decoder.StringDecoder('utf8');\n    code = decoder.write(Buffer.from(bundled.outputFiles[0].contents));\n  } else if (buildOptions.outdir && buildOptions.write) {\n    // We know that this has to be an array of entry point strings, with a single entry\n    const entryFile = /** @type {{entryPoints: string[]}} */buildOptions.entryPoints[0];\n    const fileName = _path.default.basename(entryFile).replace(/\\.[^/.]+$/, '.js');\n    code = (await readFile(_path.default.join(buildOptions.outdir, fileName))).toString();\n    await unlink(_path.default.join(buildOptions.outdir, fileName));\n  } else {\n    throw new Error(\"You must either specify `write: false` or `write: true` and `outdir: '/path'` in your esbuild options\");\n  }\n  return {\n    code: `${code};return Component;`,\n    frontmatter: matter.data,\n    errors: bundled.errors,\n    matter\n  };\n}", "import { createRequestHandler } from '@remix-run/architect';\nimport * as build from '@remix-run/dev/server-build';\n\nexport const handler = createRequestHandler({\n  build,\n  mode: process.env.NODE_ENV,\n});\n", "\nimport * as entryServer from \"/Users/paulcowan/projects/frontendsupport/node_modules/.pnpm/@remix-run+dev@1.14.1/node_modules/@remix-run/dev/dist/config/defaults/entry.server.node.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/_index.tsx\";\nimport * as route2 from \"./routes/posts.$slug.tsx\";\nimport * as route3 from \"./routes/posts._index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"unstable_cssModules\":false,\"unstable_cssSideEffectImports\":false,\"unstable_dev\":false,\"unstable_postcss\":false,\"unstable_tailwind\":false,\"unstable_vanillaExtract\":false,\"v2_errorBoundary\":false,\"v2_meta\":false,\"v2_routeConvention\":true};\n  export const publicPath = \"/_static/build/\";\n  export const entry = { module: entryServer };\n  \n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/posts.$slug\": {\n      id: \"routes/posts.$slug\",\n      parentId: \"root\",\n      path: \"posts/:slug\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/posts._index\": {\n      id: \"routes/posts._index\",\n      parentId: \"root\",\n      path: \"posts\",\n      index: true,\n      caseSensitive: undefined,\n      module: route3\n    }\n  };", "import { PassThrough } from \"stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          console.error(error);\n          responseStatusCode = 500;\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import type { MetaFunction } from '@remix-run/node';\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, NavLink } from '@remix-run/react';\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\nconst Nav = () => {\n  return (\n    <header>\n      <nav>\n        <NavLink to=\"/\" end>\n          Home\n        </NavLink>\n        <NavLink to=\"/posts\">Articles</NavLink>\n      </nav>\n    </header>\n  );\n};\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { Link } from '@remix-run/react';\n\nexport default function Home() {\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to={`/posts`}>Posts</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n", "import { getMDXComponent } from 'mdx-bundler/client';\nimport { useMemo } from 'react';\nimport { type LoaderFunction, json } from '@remix-run/node';\nimport { Link, useLoaderData } from '@remix-run/react';\nimport { getPost } from '~/utils/post';\n\ntype LoaderData = {\n  frontmatter: any;\n  code: string;\n};\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  console.dir('here');\n  const slug = params.slug;\n  if (!slug) throw new Response('Not found', { status: 404 });\n\n  console.dir({ slug, a: __dirname });\n\n  const post = await getPost(slug);\n  if (post) {\n    const { frontmatter, code } = post;\n    return json({ frontmatter, code });\n  }\n};\n\nexport default function PostRoute() {\n  console.log('there');\n  const { code, frontmatter } = useLoaderData<LoaderData>();\n  const Component = useMemo(() => getMDXComponent(code), [code]);\n\n  return (\n    <>\n      <Link to=\"/\">\u2190 Back to blog index</Link>\n      {frontmatter.image && (\n        <div className=\"mb-6 -mt-6\">\n          <div className=\"text-center\">\n            {/* <div>\n              <img src={frontmatter.image.url} className=\"object-cover object-center w-full\" />\n            </div> */}\n            <p className=\"mt-2 text-sm text-slate-600\">\n              Credit: <a href={frontmatter.image.credit.url}>{frontmatter.image.credit.text}</a>\n            </p>\n          </div>\n        </div>\n      )}\n\n      <h1 className=\"my-20\">{frontmatter.title}</h1>\n\n      <Component attributes={frontmatter} />\n      {/* <div className=\"hero\">Sign up to get notified about new posts.</div> */}\n    </>\n  );\n}\n", "import parseFrontMatter from 'front-matter';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { bundleMDX } from './mdx.server';\n\nexport type Post = {\n  slug: string;\n  title: string;\n};\n\nexport type PostMarkdownAttributes = {\n  title: string;\n};\n\nexport async function getPost(slug: string) {\n  console.dir({ slug, a: __dirname });\n  const source = await fs.readFile(path.join(`${__dirname}/../blog-posts`, `${slug}.mdx`), 'utf-8');\n\n  console.dir({ source });\n  const { default: remarkGfm } = await import('remark-gfm');\n  const { default: rehypeAutolinkHeadings } = await import('rehype-autolink-headings');\n\n  const { default: rehypeToc } = await import('rehype-toc');\n  const { default: rehypeSlug } = await import('rehype-slug');\n\n  const post = await bundleMDX({\n    source,\n    mdxOptions(options, frontmatter) {\n      options.remarkPlugins = [\n        ...(options.remarkPlugins ?? []),\n        // remarkMdxImages,\n        remarkGfm,\n        // remarkBreaks,\n        // [remarkFootnotes, { inlineNotes: true }],\n      ];\n      options.rehypePlugins = [...(options.rehypePlugins ?? []), rehypeAutolinkHeadings, rehypeSlug, rehypeToc];\n\n      return options;\n    },\n  }).catch((e) => {\n    console.error(e);\n    throw e;\n  });\n\n  return post;\n}\n\nexport async function getPosts() {\n  const postsPath = await fs.readdir(`${__dirname}/../blog-posts`, {\n    withFileTypes: true,\n  });\n\n  const posts = await Promise.all(\n    postsPath.map(async (dirent) => {\n      const file = await fs.readFile(path.join(`${__dirname}/../blog-posts`, dirent.name));\n      const { attributes } = parseFrontMatter(file.toString());\n\n      return {\n        slug: dirent.name.replace(/\\.mdx/, ''),\n        //@ts-ignore\n        title: attributes.meta.title,\n      };\n    }),\n  );\n  return posts;\n}\n", "export { bundleMDX } from 'mdx-bundler';\n", "import { Link, useLoaderData } from '@remix-run/react';\n\nimport { getPosts } from '~/utils/post';\nimport type { Post } from '~/utils/post';\nimport { type LoaderFunction } from '@remix-run/node';\n\nexport const loader: LoaderFunction = async () => {\n  return getPosts();\n};\n\nexport default function Posts() {\n  const posts = useLoaderData<Post[]>();\n\n  console.dir(posts);\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.slug}>\n            <Link to={`/posts/${post.slug}`}>{post.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n", "export default {'version':'910335bd','entry':{'module':'/_static/build/entry.client-JURS4N4T.js','imports':['/_static/build/_shared/chunk-6PUIDCUW.js','/_static/build/_shared/chunk-KKHX73BG.js','/_static/build/_shared/chunk-HRTTMHIP.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/_static/build/root-HFPTSSY7.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/_static/build/routes/_index-35JPHKEJ.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/posts.$slug':{'id':'routes/posts.$slug','parentId':'root','path':'posts/:slug','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/posts.$slug-6MB2FSH7.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/posts._index':{'id':'routes/posts._index','parentId':'root','path':'posts','index':true,'caseSensitive':undefined,'module':'/_static/build/routes/posts._index-YAYKAITG.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'cssBundleHref':undefined,'hmr':undefined,'url':'/_static/build/manifest-910335BD.js'};"],
  "mappings": "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",
  "names": ["value", "module", "formatter", "matter", "matter", "fence", "close", "pick", "import_matters", "value", "require_dist", "bundleMDX", "nodeInterop", "remarkFrontmatter", "matter", "value", "loader", "handler", "isbot", "import_react", "import_jsx_dev_runtime", "import_react", "import_jsx_dev_runtime", "import_react", "import_node", "fs", "path", "frontmatter", "parseFrontMatter", "import_jsx_dev_runtime", "frontmatter", "loader", "import_react", "import_jsx_dev_runtime", "loader", "handler"]
}
